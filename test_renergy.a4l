REQUIRE "atoms.a4l";


MODEL heat_transfer_coefficient_radiance(
	T1 WILL_BE temperature;
	T2 WILL_BE temperature;
	E1 WILL_BE solver_var;
	E2 WILL_BE solver_var;
	);
	
	value IS_A solver_var;
	
	value = 6*(T1 + T2)*(T1^2 + T2^2) / (1/E1 + 1/E2 - 1);	
	
END heat_transfer_coefficient_radiance;


MODEL test_radiance;

	T1 IS_A temperature;
	T2 IS_A temperature;
	E1 IS_A solver_var;
	E2 IS_A solver_var;
	
	h_r IS_A heat_transfer_coefficient_radiance(T1, T2, E1, E2);

	METHODS
		METHOD specify;
			FIX T1;
			FIX T2;
			FIX E1;
			FIX E2;
		END specify;
		METHOD values;
			T1 := 60 {K} + 247 {K};
			T2 := 30 {K} + 247 {K};
			E1 := 0.6;
			E2 := 0.7;
		END values;
		METHOD on_load;
			RUN specify;
			RUN values;
		END on_load;	

END test_radiance;



MODEL ifpos(
	n WILL_BE solver_var;
	);
	
	value IS_A solver_var;	
	
	value = n;

(*	IF n>0 THEN
	value = n;
	ELSE
	value = 0;
	END IF;
*)

END ifpos;	


MODEL Nusselt_number(
	T1 WILL_BE temperature;
	T2 WILL_BE temperature;
	B WILL_BE angle;
	L WILL_BE distance;
	);

	g IS_A acceleration;
	value IS_A solver_var;
	dT IS_A solver_var;
	Ra IS_A solver_var;
	t1 IS_A solver_var;
	t2 IS_A solver_var;
	tt IS_A solver_var;
	
	g = 9.8 {m/s^2};
	dT = T2 - T1;
	Ra = g * B * dT * L^3;

	t1 = (1 - 1708/(Ra*cos(B)));
	tt = (Ra * cos(B)/5830);
	t2 = tt^(1.0);
	
(*	t2 = (Ra * cos(B)/5830)^(1/3); *)
	
	value = 1 + 1.44*(1- 1708*((sin(1.8*B))^1.6)/(Ra*cos(B)) )* t1 + t2;
END Nusselt_number;


MODEL test_Nusselt_number;

	T1 IS_A temperature;
	T2 IS_A temperature;
	B IS_A angle;
	L IS_A distance;

	h_c IS_A Nusselt_number(T1, T2, B, L);

	METHODS
		METHOD specify;
			FIX T1;
			FIX T2;
			FIX B;
			FIX L;
		END specify;
		METHOD values;
			T1 := 60 {K} + 247 {K};
			T2 := 30 {K} + 247 {K};
			B := 1.0 {rad};
			L := 2 {cm};
		END values;
		METHOD on_load;
			RUN specify;
			RUN values;
		END on_load;	

END test_Nusselt_number;


MODEL air_themal_conductivity;
	value IS_A solver_var;
	value = 1;
END air_themal_conductivity;


MODEL heat_transfer_coefficient_convection(
	T1 WILL_BE temperature;
	T2 WILL_BE temperature;
	spacing  WILL_BE distance;
	B WILL_BE angle;
	);
	
	value IS_A solver_var;
	
	Nu IS_A Nusselt_number(T1, T2, B, spacing);
	K IS_A air_themal_conductivity;
		
	value = Nu.value * K.value / spacing;	
END heat_transfer_coefficient_convection;


MODEL thermo_resistance(
	T WILL_BE temperature;
	T_ WILL_BE temperature;
	E WILL_BE solver_var;
	E_ WILL_BE solver_var;
	spacing WILL_BE distance;
	tilt WILL_BE angle;
	);
	
	value IS_A solver_var;
	
	h_r IS_A heat_transfer_coefficient_radiance(T, T_, E, E_ );
    h_c IS_A heat_transfer_coefficient_convection(T, T_, spacing, tilt );
    
	value = 1/(h_c.value + h_r.value);

	METHODS
		METHOD specify;
			FIX T;
			FIX T_;
			FIX E;
			FIX E_;
			FIX spacing;
			FIX tilt;
		END specify;
		
END thermo_resistance;






MODEL test_thermo_resistance;

	T1, T2 	IS_A temperature;
	E1 		IS_A solver_var;
	E2 		IS_A solver_var;
	spacing IS_A distance;
	tilt 	IS_A angle;

	R 		IS_A thermo_resistance(T1, T2, E1, E2, spacing, tilt);

	METHODS
		METHOD specify;
			RUN ClearAll;
			RUN R.specify;
		END specify;

		METHOD values;			
			T1 :=  60 {K} + 273.15 {K};
			T2 :=  30 {K} + 273.15 {K};
			E1 := 0.6;
			E2 := 0.7;
			spacing := 2 {cm};
			tilt := 0.2 {rad};			
		END values;
	
		METHOD on_load;
			RUN specify;
			RUN values;
		END on_load;

END test_thermo_resistance;



MODEL flat_plate_collector;

	Tp IS_A temperature;
	Ta IS_A temperature;

	NR IS_A integer_constant;
	Covers[1..NR] IS_A thermo_resistance;

	Covers[1].T_, Tp ARE_THE_SAME;

	FOR i IN [2..NR] CREATE
		Covers[i].T_, Covers[i-1].T ARE_THE_SAME;
    END FOR;

	Ut = 1 / SUM[Covers[1..NR].value] ;

	FOR i IN [2..NR] CREATE
		Covers[i].T_ = Covers[i-1].T_ - Covers[i].value * Ut * (Tp-Ta);
    END FOR;


	METHODS
		METHOD specify;
		    FOR i IN [1..NR] DO
		        RUN Covers[i].specify;
		    END FOR;
		END specify;
	

END flat_plate_collector;



MODEL test_flat_plate_collector;
    fpcollector IS_A flat_plate_collector;

    fpcollector.NR :==  3;

METHODS

    METHOD values;

        tankFarm.metal_density              := 7.85 {g/cm^3};
        tankFarm.tank[1].side.D             := 5 {m};

        tankFarm.tank[2].side.D             := 6 {m};

        tankFarm.tank[3].side.D             := 7 {m};

        tankFarm.tank[1..3].side.H          := 6 {m};

        tankFarm.tank[1..3].wall_thickness  := 1.5 {cm};

    END values;
    METHOD specify;
        RUN tankFarm.tank[1..3].specify;

    END specify;

END test_flat_plate_collector;

