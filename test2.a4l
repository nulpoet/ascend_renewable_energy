REQUIRE "atoms.a4l";


MODEL heat_transfer_coefficient_radiance(
	T1 WILL_BE solver_var;
	T2 WILL_BE solver_var;
	E1 WILL_BE solver_var;
	E2 WILL_BE solver_var;
	);

	value IS_A solver_var;
	
	value = 5.67e-8*(T1 + T2)*(T1^2 + T2^2) / (1/E1 + 1/E2 - 1);	
	
END heat_transfer_coefficient_radiance;


MODEL test_radiance;

	T1 IS_A solver_var;
	T2 IS_A solver_var;
	E1 IS_A solver_var;
	E2 IS_A solver_var;
	
	h_r IS_A heat_transfer_coefficient_radiance(T1, T2, E1, E2);

	METHODS
		METHOD specify;
			FIX T1;
			FIX T2;
			FIX E1;
			FIX E2;
		END specify;
		METHOD values;
			T1 := 60 {K} + 247 {K};
			T2 := 30 {K} + 247 {K};
			E1 := 0.6;
			E2 := 0.7;
		END values;
		METHOD on_load;
			RUN specify;
			RUN values;
		END on_load;	

END test_radiance;


MODEL ifpos(
	n WILL_BE solver_var;
	);
	
	value IS_A solver_var;	
	
	value = n;

(*	IF n>0 THEN
	value = n;
	ELSE
	value = 0;
	END IF;
*)

END ifpos;	


MODEL Nusselt_number(
	T1 WILL_BE solver_var;
	T2 WILL_BE solver_var;
	B WILL_BE angle;
	L WILL_BE solver_var;
	);

	g IS_A solver_var;
	value IS_A solver_var;
	dT IS_A solver_var;
	Ra IS_A solver_var;
	t1 IS_A solver_var;
	t2 IS_A solver_var;
	tt IS_A solver_var;
	
	g = 9.8 ;
	dT = T2 - T1;
	Ra = g * B * dT * L^3;

	t1 = (1 - 1708/(Ra*cos(B) ) );
	tt = (Ra * cos(B)/5830);
	t2 = tt^(1.0) - 1;

	
	value = 1 + 1.44*(1- 1708*((sin(1.8*B))^1.6)/(Ra*cos(B) ) )* t1 + t2;
END Nusselt_number;


MODEL test_Nusselt_number;

	T1 IS_A solver_var;
	T2 IS_A solver_var;
	B IS_A angle;
	L IS_A solver_var;

	h_c IS_A Nusselt_number(T1, T2, B, L);

	METHODS
		METHOD specify;
			FIX T1;
			FIX T2;
			FIX B;
			FIX L;
		END specify;
		METHOD values;
			T1 := 60 {K} + 247 {K};
			T2 := 30 {K} + 247 {K};
			B := 0.85 {rad};
			L := 1.8 {cm};
		END values;
		METHOD on_load;
			RUN specify;
			RUN values;
		END on_load;	

END test_Nusselt_number;


MODEL air_themal_conductivity;
	value IS_A solver_var;
	value = 0.0253;
END air_themal_conductivity;


MODEL heat_transfer_coefficient_convection(
	T1 WILL_BE solver_var;
	T2 WILL_BE solver_var;
	spacing  WILL_BE solver_var;
	B WILL_BE angle;
	);
	
	value IS_A solver_var;
	
	Nu IS_A Nusselt_number(T1, T2, B, spacing);
	K IS_A air_themal_conductivity;
		
	value = Nu.value * K.value / spacing;	
END heat_transfer_coefficient_convection;


MODEL cover(
	T WILL_BE solver_var;
	T_ WILL_BE solver_var;
	E WILL_BE fraction;
	E_ WILL_BE fraction;
	spacing WILL_BE solver_var;
	tilt WILL_BE angle;
);
	
	thermal_resistance IS_A solver_var;
	
	h_r IS_A heat_transfer_coefficient_radiance(T, T_, E, E_ );
    h_c IS_A heat_transfer_coefficient_convection(T, T_, spacing, tilt );
    
	thermal_resistance = 1/(h_c.value + h_r.value );

	METHODS
		METHOD specify;
			FIX E;
			FIX spacing;
			FIX tilt;

		END specify;		
END cover;


MODEL topcover_to_atmosphere(
	Ta WILL_BE solver_var;
	Ttop WILL_BE solver_var;
	Etop WILL_BE fraction;
);
	Ts IS_A solver_var;
	thermal_resistance IS_A solver_var;
	h_r_a IS_A solver_var;
	h_c_a IS_A solver_var;

	Ts = 0.0552*(Ta^1.5);
	h_r_a = Etop * 5.67e-8 * (Ttop^4 - Ts^4) / (Ttop - Ta);
	
	h_c_a = 10;
	
	thermal_resistance = 1/(h_r_a + h_c_a );
	
	METHODS
		METHOD specify;
			FIX h_c_a;
			FIX Ta;
			FIX Etop;
		END specify;
END topcover_to_atmosphere;



MODEL absorbed_radiations;
	value IS_A solver_var;
	
	METHODS
		METHOD specify;
			FIX value;
		END specify;

END absorbed_radiations;


MODEL flat_plate_collector;

	A IS_A solver_var;
	tilt IS_A angle;
	S IS_A absorbed_radiations;	
	Ta IS_A solver_var;
	Tp IS_A solver_var;
	Ep IS_A fraction;
	Ec IS_A fraction;
	spacing IS_A solver_var;

	Tc IS_A solver_var;
	Ut IS_A solver_var;
	Qu IS_A solver_var;	
	
	Cover IS_A cover( Tc, Tp, Ec, Ep, spacing, tilt );
	Rtop IS_A topcover_to_atmosphere( Ta, Tc, Ec );

	Cover.T = Tp - Cover.thermal_resistance * Ut * (Tp-Ta);
	Ut = 1 / ( Cover.thermal_resistance + Rtop.thermal_resistance );
	Qu = A*( S.value -Ut*(Tp-Ta));
	
	METHODS
		METHOD specify;			
			FIX A;
			FIX tilt;
			FIX S.value;
			FIX Ta;
			FIX Tp;
			FIX Ep;

	    	FIX Ec;
	    	FIX spacing;
	        RUN Cover.specify;

		END specify;		
END flat_plate_collector;


MODEL test_flat_plate_collector;
    fpcollector IS_A flat_plate_collector;

	METHODS
		METHOD values;			
			fpcollector.S.value := 10000000;
			
		    fpcollector.Ta := 30 + 273.15;
   		    fpcollector.Tp := 80 + 273.15;
		    
		    fpcollector.Ep := 0.95;
		    
		    fpcollector.A := 1;
		
			fpcollector.tilt := 0.785 {rad}; (*45 degrees*)
		
			RUN values1;			
		END values;
	   
		METHOD values1;
			fpcollector.Ec 		:= 	0.8;
			fpcollector.spacing 	:= 	0.02;
		END values1;
		
		METHOD specify;			
		    RUN fpcollector.specify;
		END specify;
	
		METHOD on_load;
			RUN specify;
			RUN values;
		END on_load;		
END test_flat_plate_collector;

