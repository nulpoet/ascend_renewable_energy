REQUIRE "atoms.a4l";


MODEL emmisivity(
	e;
	)
	value = e;

	METHODS
		METHOD specify;
			FIX e;
		END specify
END emmisivity;


MODEL heat_transfer_coefficient_radiance(
	T1 WILL_BE temperature;
	T2 WILL_BE temperature;
	E1 WILL_BE emmisivity;
	E2 WILL_BE emmisivity;
	);
	value = 6*(T1 + T2)*(T1^2 + T2^2) / (1/E1,value + 1/E2.value - 1);	
END heat_transfer_coefficient_radiance;


MODEL Nusselt_number(
	T1 WILL_BE temperature;
	T2 WILL_BE temperature;
	B WILL_BE angle;
	L WILL_BE distance;
	);
	g IS_A acceleration;

	g = 9.8 {m/s^2}
	dT = T2 - T1;
	Ra = g * B * dT * L^3;

	value = 1 + 1.44*(1- 1708*((sin(1.8*B))^1.6)/(Ra*cos(B)) )* ifpos((1 - 1708/(Ra*cos(B)))).value + ifpos((Ra * cos(B)/5830)^(1/3)).value;

	METHODS
		METHOD ifpos(
			n;
			)
			IF n>0 THEN
			value = n;
			ELSE
			value = 0;
			END IF;
		END ifpos;	
END Nusselt_number;


MODEL air_themal_conductivity();
	value = 1;
END air_themal_conductivity;


MODEL heat_transfer_coefficient_convection(
	T1 WILL_BE temperature;
	T2 WILL_BE temperature;
	spacing  WILL_BE distance;
	B WILL_BE angle;
	);
	Nu IS_A Nusselt_number(T1, T2, B);
	K IS_A air_themal_conductivity;
		
	value = Nu * K / spacing;	
END heat_transfer_coefficient_convection;


MODEL thermo_resistance(
	T1, T2 WILL_BE temperature;
	E1, E2 WILL_BE emmisivity;
	spacing WILL_BE distance;
	tilt WILL_BE angle;
	);
	h_r IS_A heat_transfer_coefficient_radiance( T1, T2, E1, E2 );
    h_c IS_A heat_transfer_coefficient_convection( T1, T2, spacing, tilt );
    
	value = 1/(h_c.value + h_r.value);

	METHODS
		METHOD specify;
			FIX T1;
			FIX T2;
			FIX spacing;
			FIX tilt;
		END specify
END thermo_resistance;

